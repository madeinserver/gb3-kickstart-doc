<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmSpark::WalkableService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmSpark::WalkableService</p>
<p class="NDLRefParentage">: public ISystemService</p>


<p class="NDLRefHeaderFile">&lt;WalkableService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_spark_1_1_walkable_service.gif" alt="Inheritance graph for egmSpark::WalkableService"/>
  <p class="FigureCaption">Inheritance graph for egmSpark::WalkableService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">Helps entities conform to walkable and non-walkable surfaces. </p>
<p class="NDLNormal">This service provides the functionality necessary to make an entity to conform to the height of walkable surfaces or terrain and be blocked and slide around the edges of walkable surfaces, non-walkable surfaces and terrain. It collects references to geometry that follows a naming convention identifying it as walkable or non-walkable and optionally an NiTerrain object.</p>
<p class="NDLNormal">The service can optionally track material metadata from walk requests and associate that with the requesting entity such that material change notifications can be sent out when the walked-on material changes.</p>
<p class="NDLNormal">Walkable and non-walkable surfaces are identified whenever new scenegraphs are created. The walkable service will inspect newly created scenegraphs and find any objects within it named "Walkable" or "NonWalkable" respectively. These objects are cached and recursively picked against to determine success.</p>
<p class="NDLNormal">Terrain material can be used to limit walkability. To do so, attach a float metadata to the material called "NonWalkable". The value of the metadata will be used to determine the walkability threshold for that material on a scale from 0 to 100. Areas where the material has a percent of influence above this threshold will be non-walkable.</p>
<p class="NDLNormal">To associate a walkable surface with a material name, attach an NiStringExtraData called "MaterialName" with a value of whatever material you want change notifications to be sent for. Similarly, to associate a material with terrain, add a string metadata to your terrain material called "MaterialName" with a value of the material name. </p>

<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_spark_1_1_walkable_service_1a73941f7736c4064bc1a4022f722936ad"></a>
<p class="NDLRefMemberFunction">WalkableService()</p>
<p class="NDLRefMemberDetailedDescription">Constructor </p>

<a name="classegm_spark_1_1_walkable_service_1ab4911e5735c0f82e7aae400f20172ceb"></a>
<p class="NDLRefMemberFunction">virtual void  HandleSceneAddedMessage(<br/>const ecr::SceneGraphAddedMessage* pMessage, <br/>efd::Category targetChannel)</p>
<p class="NDLRefMemberDescription">Checks the new scene for walkable/nonwalkable elements and adds them to the list. </p>

<a name="classegm_spark_1_1_walkable_service_1ac720fb7f00534f1868718c31c91b722a"></a>
<p class="NDLRefMemberFunction">virtual void  HandleSceneRemovedMessage(<br/>const ecr::SceneGraphRemovedMessage* pMessage, <br/>efd::Category targetChannel)</p>
<p class="NDLRefMemberDescription">Removes walkable/nonwalkable elements for the removed scene. </p>

<a name="classegm_spark_1_1_walkable_service_1a1ceb213d534bfcb85c9e24ab3e18e062"></a>
<p class="NDLRefMemberFunction">virtual void  HandleTerrainChangedMessage(<br/>const egmTerrain::TerrainChangedMessage* pMessage, <br/>efd::Category targetChannel)</p>
<p class="NDLRefMemberDescription">Deals with updates to the terrain, probably due to rapid iteration. </p>

<a name="classegm_spark_1_1_walkable_service_1a40eb4da0aff0f1f76ca7cd0c3d352cc4"></a>
<p class="NDLRefMemberFunction">efd::Bool  Walk(<br/>egf::Entity* pEntity, <br/>efd::Point3 source, <br/>efd::Point3 goal, <br/>efd::Point3& result, <br/>efd::SInt32 callDepth)</p>
<p class="NDLRefMemberDescription">Determines how the given entity can move relative to the scene's walkable surfaces, non-walkable surfaces and terrain. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>The entity that is attempting to move </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">source</span></td>
    <td>The starting position of that entity </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">goal</span></td>
    <td>The destination position the entity is trying to move to </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">result</span></td>
    <td>The actual destination after being blocked or sliding </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">callDepth</span></td>
    <td>Internally used to limit pick count. Should always be zero when called externally </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>If no valid walkable results were found, false is returned </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1a561468905f6f35fe9dc0be5605e3cbb9"></a>
<p class="NDLRefMemberFunction">void  SetMaxSlope(efd::Float32 newSlope)</p>
<p class="NDLRefMemberDescription">Sets the slope threshold beyond which the player will not be able to walk. </p>
<p class="NDLRefMemberDetailedDescription">This parameter is only considered when moving on terrain. Walkable meshes can be walked on at any slope.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">newSlope</span></td>
    <td>Slope expressed as a ratio of distance in the pick direction over distance perpendicular to the slope direction. In other words, it is rise over run. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1a398ccab49b4663c6fc0683b3b11b10e6"></a>
<p class="NDLRefMemberFunction">efd::Float32  GetMaxSlope()</p>
<p class="NDLRefMemberDescription">Retrieve the current slope threshold that will limit movement on terrain. </p>

<a name="classegm_spark_1_1_walkable_service_1acb610378e334813f2f2f3afdf3f3062f"></a>
<p class="NDLRefMemberFunction">void  SetTerrainLODLevel(efd::UInt32 newLOD)</p>
<p class="NDLRefMemberDescription">Sets the LOD level that is used for terrain testing. </p>
<p class="NDLRefMemberDetailedDescription">Using a finer LOD level can be slightly more expensive and add small jagged edges to the walkable/nonwalkable areas. Using a coarser LOD level can prevent or allow entities from moving into unwanted areas and adds more error to ground conformance.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">newLOD</span></td>
    <td>LOD level to use </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1adbbce2880cdc4204835deb74506a621e"></a>
<p class="NDLRefMemberFunction">efd::UInt32  GetTerrainLODLevel()</p>
<p class="NDLRefMemberDescription">Retrieve the current LOD level used for terrain testing. </p>

<a name="classegm_spark_1_1_walkable_service_1adf28446ed00410aca26defd87b8b3916"></a>
<p class="NDLRefMemberFunction">void  SetPickHeight(efd::Float32 newHeight)</p>
<p class="NDLRefMemberDescription">Sets an offset above the given entity's origin to cast the pick from. </p>
<p class="NDLRefMemberDetailedDescription">The offset is always in the exact opposite direction of the pick direction. A positive value is necessary if the entity needs to be able to move up an incline.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">newHeight</span></td>
    <td>the new offset from entity origin to use when performing picks </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1adf8f49e91c5f5a3e1f1fa8c8a97011ae"></a>
<p class="NDLRefMemberFunction">efd::Float32  GetPickHeight()</p>
<p class="NDLRefMemberDescription">Retrieve the current pick height used for all walk testing picks. </p>

<a name="classegm_spark_1_1_walkable_service_1a958b2eac723e42c958164951f10fb363"></a>
<p class="NDLRefMemberFunction">void  SetPickDirection(efd::Point3 newDirection)</p>
<p class="NDLRefMemberDescription">Sets the direction of all walk testing picks. </p>
<p class="NDLRefMemberDetailedDescription">This should be the opposite of the application's up vector. A typical example for pick direction would be &lt;0, 0, -1&gt;.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">newDirection</span></td>
    <td>The pick direction </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1a9655f920f3c7882c2c3d7456aa869918"></a>
<p class="NDLRefMemberFunction">efd::Point3  GetPickDirection()</p>
<p class="NDLRefMemberDescription">Retrieve the current pick direction. </p>

<a name="classegm_spark_1_1_walkable_service_1acb308be4babec457d7bdea681e5284dd"></a>
<p class="NDLRefMemberFunction">void  SetTrackMaterial(efd::Bool trackChanges)</p>
<p class="NDLRefMemberDescription">Enable or disable whether the walkable service tracks material changes for each entity that requests walking information. </p>
<p class="NDLRefMemberDetailedDescription">When tracking is enabled, the service will pay attention to any material metadata on picked surfaces and store it. As soon as a different material is detected, a notification will be sent out. The service only tracks entities that make calls to the walk function.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">trackChanges</span></td>
    <td>If true, material changes will be tracked </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_walkable_service_1a0e5cd00602cf34febf268a839867d5de"></a>
<p class="NDLRefMemberFunction">efd::Bool  GetTrackMaterial()</p>
<p class="NDLRefMemberDescription">Retrieve whether material changes are currently being tracked. </p>

<a name="classegm_spark_1_1_walkable_service_1a2fa1e6b611450b2a856b43d888b23cda"></a>
<p class="NDLRefMemberFunction">void  SetWalkAnywhere(efd::Bool walkAnywhere)</p>
<p class="NDLRefMemberDescription">Disables the Walk service such that it will always return the indicated goal position without actually testing. </p>

<a name="classegm_spark_1_1_walkable_service_1af4379d0f3d5301b8a0f0f56672a1949b"></a>
<p class="NDLRefMemberFunction">efd::Bool  GetWalkAnywhere()</p>
<p class="NDLRefMemberDescription">Returns the state of the "Walk Anywhere" flag, which disables the walk service. </p>

<a name="classegm_spark_1_1_walkable_service_1a6b5de05a22cd8fa973ce64be04f1b47f"></a>
<p class="NDLRefMemberFunction">efd::Bool  GetCurrentMaterial(<br/>egf::Entity* pEntity, <br/>NiFixedString& materialName)</p>
<p class="NDLRefMemberDescription">When material tracking is enabled this function can be used to query what the currently known material is for any given entity. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pEntity</span></td>
    <td>What Entity to look up the current material for </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">materialName</span></td>
    <td>The material that the given entity was last known to walk on </td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if the entity has walked on a material before </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
