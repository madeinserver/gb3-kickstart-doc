<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">

<html>
<head>

<title>egmSpark::HUDService</title>
<!--(Begin Meta)================================================================================-->

<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta name="Originator" content="Expedition" />
<meta name="Generator" content="DoxyConvert by Emergent Game Technologies - http://emergent.net" />

<meta name="Last-Updated" content="%lastupdated%" />

<!--(End Meta)==================================================================================-->
    
<!--(Begin Links)===============================================================================-->

<link rel="stylesheet" href="../../shared/Emergent.css" type="text/css" />

<!--(End Links)=================================================================================-->

</head>
  
<!--(Body)======================================================================================-->
<body lang="EN-US">
<script src="../../shared/NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
<script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>

<p class="NDLRefHeadClassTitle">egmSpark::HUDService</p>
<p class="NDLRefParentage">: public ISystemService</p>


<p class="NDLRefHeaderFile">&lt;HUDService.h&gt;</p>

<p class="NDLRefHead1" style="text-align: center; ">
<div class="FigureContainer">
  <img src="./images/classegm_spark_1_1_h_u_d_service.gif" alt="Inheritance graph for egmSpark::HUDService"/>
  <p class="FigureCaption">Inheritance graph for egmSpark::HUDService</p>
</div>
</p>

<p class="NDLRefHead1">Description</p>
<p class="NDLNormal">The <span class="NDLSystemFont">HUDService</span> class is responsible for parsing the HUD definition file and rendering the game play HUD elements. </p>
<p class="NDLNormal">The HUD elements to display and their parameters are parsed from a file in the data directory named "MangledMetalHUD.xml". Using this XML, you can specify a texture to load as a HUD element, what screen alignment and offset it needs, optional re-scaling, and the option to automatically associate the width with a property on the player entity. This file does not support rapid iteration.</p>
<p class="NDLNormal">The supported texture attributes and their default values are documented below. </p>

<a name="construction_and_destruction"></a>
<p class="NDLRefHead1">Construction and Destruction</p>


<a name="classegm_spark_1_1_h_u_d_service_1a5ab8b4050424faedf926882a0af2a4cd"></a>
<p class="NDLRefMemberFunction">HUDService()</p>
<p class="NDLRefMemberDescription">Constructor. </p>

<a name="classegm_spark_1_1_h_u_d_service_1a21813b8754f5a306eaee327b3a575efb"></a>
<p class="NDLRefMemberFunction">virtual ~HUDService()</p>
<p class="NDLRefMemberDescription">Destructor. </p>
<a name="public_static_methods"></a>
<p class="NDLRefHead1">Public Static Methods</p>


<a name="classegm_spark_1_1_h_u_d_service_1acf58c1a942c9990043075c1afa634029"></a>
<p class="NDLRefMemberFunction">static bool  PreRenderCallback(<br/>NiRenderClick* pCurrentRenderClick, <br/>void* pvCallbackData)</p>
<p class="NDLRefMemberDescription">Updates any dynamic HUD elements immediately before render. </p>
<p class="NDLRefMemberDetailedDescription">Since changing dynamic HUD elements might be a GPU-blocking operation, we want to give the longest time possible to the GPU to complete the previous frame's work before issuing an update.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">pCurrentRenderClick</span></td>
    <td>the HUD service's click. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">pvCallbackData</span></td>
    <td>Unused.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>True if it succeeds, false if it fails. </td>
</tr>

        </tbody>
    </table>
</div>


<a name="public_methods"></a>
<p class="NDLRefHead1">Public Methods</p>


<a name="classegm_spark_1_1_h_u_d_service_1a61a0258e87ca9145fb278a1468ee2890"></a>
<p class="NDLRefMemberFunction">virtual const char*  GetDisplayName() const</p>
<p class="NDLRefMemberDescription">Return the name of the service, in this case "HUDService". </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><em>Return Value</em></td>
    <td>The name. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_h_u_d_service_1a61e6126761f924ed4c4dfedabced3403"></a>
<p class="NDLRefMemberFunction">void  SetPlayerEntity(const egf::EntityID& player)</p>
<p class="NDLRefMemberDescription">Set the player entity to check for HUD elements to update. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">player</span></td>
    <td>entity to check for HUD elements. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_h_u_d_service_1a4dcecc2f57d9766a7e6d1ee0b01c002b"></a>
<p class="NDLRefMemberFunction">void  Show(efd::Bool show)</p>
<p class="NDLRefMemberDescription">Show/hide the HUD. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">show</span></td>
    <td>True if the HUD should be visible. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_h_u_d_service_1a1cfbbf88918eee4257e9c73960084f01"></a>
<p class="NDLRefMemberFunction">efd::Bool  ParseHUDDefinition(const efd::utf8string& filename)</p>
<p class="NDLRefMemberDescription">Parses the HUD definition files. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">filename</span></td>
    <td>Full path to the HUD xml file. All referenced textures are considered to be relative to this xml file.</td>
</tr>
<tr>
    <td><em>Return Value</em></td>
    <td>true if it succeeds, false if it fails. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_h_u_d_service_1adb9a8f797badbd963d06bead8be8edd0"></a>
<p class="NDLRefMemberFunction">void  DrawText(<br/>const efd::utf8string& text, <br/>const efd::Point2& screenPoint, <br/>const NiColorA& textColor = NiColorA::WHITE, <br/>bool centerText = false)</p>
<p class="NDLRefMemberDescription">Draw text. </p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">text</span></td>
    <td>The text to draw. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">screenPoint</span></td>
    <td>The screen coordinates in the range of [0.0, 1.0) at which to draw the text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">textColor</span></td>
    <td>The color to draw the text. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">centerText</span></td>
    <td>If true screenPoint specifies the center of the text rather than the corner. </td>
</tr>

        </tbody>
    </table>
</div>



<a name="classegm_spark_1_1_h_u_d_service_1a920967cdf7d5aa2f99df049e2fce283e"></a>
<p class="NDLRefMemberFunction">void  Log(<br/>const efd::utf8string& text, <br/>const NiColorA& color = NiColorA::WHITE)</p>
<p class="NDLRefMemberDescription">Logs information to the screen, as well as to the log file. </p>
<p class="NDLRefMemberDetailedDescription">A limited number of logged lines are stored for display to the screen.</p>
<p class="NDLRefMemberDetailedDescription"></p>
<!--(Table)=====================================================================================-->
<div class="ReferenceTable">
    <table>
        <thead>
            <tr>
                <th>Parameter</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>  
<tr>
    <td><span class="NDLSystemFont">text</span></td>
    <td>The text to log and display on the screen. </td>
</tr>
<tr>
    <td><span class="NDLSystemFont">color</span></td>
    <td>The color for the text. </td>
</tr>

        </tbody>
    </table>
</div>


 
<!--kadov_tag{{<placeholder id="footer">}}-->

</body>

</html>
